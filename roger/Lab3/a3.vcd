$date
	Wed Oct 16 23:41:19 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Multi_Bank_Memory_t $end
$var wire 8 ! dout [7:0] $end
$var reg 1 " clk $end
$var reg 8 # din [7:0] $end
$var reg 11 $ raddr [10:0] $end
$var reg 1 % ren $end
$var reg 11 & waddr [10:0] $end
$var reg 1 ' wen $end
$scope module MBM $end
$var wire 1 " clk $end
$var wire 8 ( din [7:0] $end
$var wire 8 ) dout [7:0] $end
$var wire 11 * raddr [10:0] $end
$var wire 1 % ren $end
$var wire 11 + waddr [10:0] $end
$var wire 1 ' wen $end
$var reg 2 , raddr_ [1:0] $end
$scope module M1 $end
$var wire 1 " clk $end
$var wire 8 - din [7:0] $end
$var wire 8 . dout [7:0] $end
$var wire 9 / raddr [8:0] $end
$var wire 1 % ren $end
$var wire 9 0 waddr [8:0] $end
$var wire 1 1 wen $end
$var reg 2 2 raddr_ [1:0] $end
$scope module M1 $end
$var wire 1 " clk $end
$var wire 8 3 din [7:0] $end
$var wire 7 4 raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 5 waddr [6:0] $end
$var wire 1 6 wen $end
$var reg 8 7 dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 1 " clk $end
$var wire 8 8 din [7:0] $end
$var wire 7 9 raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 : waddr [6:0] $end
$var wire 1 ; wen $end
$var reg 8 < dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 1 " clk $end
$var wire 8 = din [7:0] $end
$var wire 7 > raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 ? waddr [6:0] $end
$var wire 1 @ wen $end
$var reg 8 A dout [7:0] $end
$upscope $end
$scope module M4 $end
$var wire 1 " clk $end
$var wire 8 B din [7:0] $end
$var wire 7 C raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 D waddr [6:0] $end
$var wire 1 E wen $end
$var reg 8 F dout [7:0] $end
$upscope $end
$upscope $end
$scope module M2 $end
$var wire 1 " clk $end
$var wire 8 G din [7:0] $end
$var wire 8 H dout [7:0] $end
$var wire 9 I raddr [8:0] $end
$var wire 1 % ren $end
$var wire 9 J waddr [8:0] $end
$var wire 1 K wen $end
$var reg 2 L raddr_ [1:0] $end
$scope module M1 $end
$var wire 1 " clk $end
$var wire 8 M din [7:0] $end
$var wire 7 N raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 O waddr [6:0] $end
$var wire 1 P wen $end
$var reg 8 Q dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 1 " clk $end
$var wire 8 R din [7:0] $end
$var wire 7 S raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 T waddr [6:0] $end
$var wire 1 U wen $end
$var reg 8 V dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 1 " clk $end
$var wire 8 W din [7:0] $end
$var wire 7 X raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 Y waddr [6:0] $end
$var wire 1 Z wen $end
$var reg 8 [ dout [7:0] $end
$upscope $end
$scope module M4 $end
$var wire 1 " clk $end
$var wire 8 \ din [7:0] $end
$var wire 7 ] raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 ^ waddr [6:0] $end
$var wire 1 _ wen $end
$var reg 8 ` dout [7:0] $end
$upscope $end
$upscope $end
$scope module M3 $end
$var wire 1 " clk $end
$var wire 8 a din [7:0] $end
$var wire 8 b dout [7:0] $end
$var wire 9 c raddr [8:0] $end
$var wire 1 % ren $end
$var wire 9 d waddr [8:0] $end
$var wire 1 e wen $end
$var reg 2 f raddr_ [1:0] $end
$scope module M1 $end
$var wire 1 " clk $end
$var wire 8 g din [7:0] $end
$var wire 7 h raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 i waddr [6:0] $end
$var wire 1 j wen $end
$var reg 8 k dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 1 " clk $end
$var wire 8 l din [7:0] $end
$var wire 7 m raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 n waddr [6:0] $end
$var wire 1 o wen $end
$var reg 8 p dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 1 " clk $end
$var wire 8 q din [7:0] $end
$var wire 7 r raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 s waddr [6:0] $end
$var wire 1 t wen $end
$var reg 8 u dout [7:0] $end
$upscope $end
$scope module M4 $end
$var wire 1 " clk $end
$var wire 8 v din [7:0] $end
$var wire 7 w raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 x waddr [6:0] $end
$var wire 1 y wen $end
$var reg 8 z dout [7:0] $end
$upscope $end
$upscope $end
$scope module M4 $end
$var wire 1 " clk $end
$var wire 8 { din [7:0] $end
$var wire 8 | dout [7:0] $end
$var wire 9 } raddr [8:0] $end
$var wire 1 % ren $end
$var wire 9 ~ waddr [8:0] $end
$var wire 1 !" wen $end
$var reg 2 "" raddr_ [1:0] $end
$scope module M1 $end
$var wire 1 " clk $end
$var wire 8 #" din [7:0] $end
$var wire 7 $" raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 %" waddr [6:0] $end
$var wire 1 &" wen $end
$var reg 8 '" dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 1 " clk $end
$var wire 8 (" din [7:0] $end
$var wire 7 )" raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 *" waddr [6:0] $end
$var wire 1 +" wen $end
$var reg 8 ," dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 1 " clk $end
$var wire 8 -" din [7:0] $end
$var wire 7 ." raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 /" waddr [6:0] $end
$var wire 1 0" wen $end
$var reg 8 1" dout [7:0] $end
$upscope $end
$scope module M4 $end
$var wire 1 " clk $end
$var wire 8 2" din [7:0] $end
$var wire 7 3" raddr [6:0] $end
$var wire 1 % ren $end
$var wire 7 4" waddr [6:0] $end
$var wire 1 5" wen $end
$var reg 8 6" dout [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6"
05"
b0 4"
b0 3"
b0 2"
bx 1"
00"
b0 /"
b0 ."
b0 -"
bx ,"
0+"
b0 *"
b0 )"
b0 ("
bx '"
0&"
b0 %"
b0 $"
b0 #"
bx ""
0!"
b0 ~
b0 }
bx |
b0 {
bx z
0y
b0 x
b0 w
b0 v
bx u
0t
b0 s
b0 r
b0 q
bx p
0o
b0 n
b0 m
b0 l
bx k
0j
b0 i
b0 h
b0 g
bx f
0e
b0 d
b0 c
bx b
b0 a
bx `
0_
b0 ^
b0 ]
b0 \
bx [
0Z
b0 Y
b0 X
b0 W
bx V
0U
b0 T
b0 S
b0 R
bx Q
0P
b0 O
b0 N
b0 M
bx L
0K
b0 J
b0 I
bx H
b0 G
bx F
0E
b0 D
b0 C
b0 B
bx A
0@
b0 ?
b0 >
b0 =
bx <
0;
b0 :
b0 9
b0 8
bx 7
16
b0 5
b0 4
b0 3
bx 2
11
b0 0
b0 /
bx .
b0 -
bx ,
b0 +
b0 *
bx )
b0 (
1'
b0 &
0%
b0 $
b0 #
0"
bx !
$end
#5000
b0 7
b0 .
b0 !
b0 )
b0 <
b0 A
b0 F
b0 2
b0 Q
b0 H
b0 V
b0 [
b0 `
b0 L
b0 k
b0 b
b0 p
b0 u
b0 z
b0 f
b0 '"
b0 |
b0 ,"
b0 1"
b0 6"
b0 ""
b0 ,
1"
#10000
b1010111 5
b1010111 :
b1010111 ?
b1010111 D
b1010111 O
b1010111 T
b1010111 Y
b1010111 ^
b1010111 i
b1010111 n
b1010111 s
b1010111 x
b1010111 %"
b1010111 *"
b1010111 /"
b1010111 4"
b1010111 0
b1010111 J
b1010111 d
b1010111 ~
0"
b1010111 #
b1010111 (
b1010111 -
b1010111 3
b1010111 8
b1010111 =
b1010111 B
b1010111 G
b1010111 M
b1010111 R
b1010111 W
b1010111 \
b1010111 a
b1010111 g
b1010111 l
b1010111 q
b1010111 v
b1010111 {
b1010111 #"
b1010111 ("
b1010111 -"
b1010111 2"
b1010111 &
b1010111 +
#15000
1"
#20000
06
01
0"
0'
#25000
1"
#30000
b1010111 4
b1010111 9
b1010111 >
b1010111 C
b1010111 N
b1010111 S
b1010111 X
b1010111 ]
b1010111 h
b1010111 m
b1010111 r
b1010111 w
b1010111 $"
b1010111 )"
b1010111 ."
b1010111 3"
b1010111 /
b1010111 I
b1010111 c
b1010111 }
0"
1%
b1010111 $
b1010111 *
#35000
bx 6"
bx 1"
bx ,"
bx '"
bx |
bx z
bx u
bx p
bx k
bx b
bx `
bx [
bx V
bx Q
bx H
bx F
bx A
bx <
b1010111 7
b1010111 .
b1010111 !
b1010111 )
1"
#40000
1U
b1111 5
b1111 :
b1111 ?
b1111 D
b1111 O
b1111 T
b1111 Y
b1111 ^
b1111 i
b1111 n
b1111 s
b1111 x
b1111 %"
b1111 *"
b1111 /"
b1111 4"
1K
b10001111 0
b10001111 J
b10001111 d
b10001111 ~
0"
1'
b1010101 #
b1010101 (
b1010101 -
b1010101 3
b1010101 8
b1010101 =
b1010101 B
b1010101 G
b1010101 M
b1010101 R
b1010101 W
b1010101 \
b1010101 a
b1010101 g
b1010101 l
b1010101 q
b1010101 v
b1010101 {
b1010101 #"
b1010101 ("
b1010101 -"
b1010101 2"
b1010001111 &
b1010001111 +
#45000
1"
#50000
b11001 5
b11001 :
b11001 ?
b11001 D
b11001 O
b11001 T
b11001 Y
b11001 ^
b11001 i
b11001 n
b11001 s
b11001 x
b11001 %"
b11001 *"
b11001 /"
b11001 4"
b1111 4
b1111 9
b1111 >
b1111 C
b1111 N
b1111 S
b1111 X
b1111 ]
b1111 h
b1111 m
b1111 r
b1111 w
b1111 $"
b1111 )"
b1111 ."
b1111 3"
b10011001 0
b10011001 J
b10011001 d
b10011001 ~
b10001111 /
b10001111 I
b10001111 c
b10001111 }
0"
b1100100 #
b1100100 (
b1100100 -
b1100100 3
b1100100 8
b1100100 =
b1100100 B
b1100100 G
b1100100 M
b1100100 R
b1100100 W
b1100100 \
b1100100 a
b1100100 g
b1100100 l
b1100100 q
b1100100 v
b1100100 {
b1100100 #"
b1100100 ("
b1100100 -"
b1100100 2"
b1010011001 &
b1010011001 +
b1010001111 $
b1010001111 *
#55000
b1 ,
b1 ""
b1 f
b1 L
b1 2
bx 7
bx .
bx !
bx )
1"
#60000
0U
1t
b1111111 5
b1111111 :
b1111111 ?
b1111111 D
0K
b1111111 O
b1111111 T
b1111111 Y
b1111111 ^
1e
b1111111 i
b1111111 n
b1111111 s
b1111111 x
b1111111 %"
b1111111 *"
b1111111 /"
b1111111 4"
b11001 4
b11001 9
b11001 >
b11001 C
b11001 N
b11001 S
b11001 X
b11001 ]
b11001 h
b11001 m
b11001 r
b11001 w
b11001 $"
b11001 )"
b11001 ."
b11001 3"
b101111111 0
b101111111 J
b101111111 d
b101111111 ~
b10011001 /
b10011001 I
b10011001 c
b10011001 }
0"
b1001101 #
b1001101 (
b1001101 -
b1001101 3
b1001101 8
b1001101 =
b1001101 B
b1001101 G
b1001101 M
b1001101 R
b1001101 W
b1001101 \
b1001101 a
b1001101 g
b1001101 l
b1001101 q
b1001101 v
b1001101 {
b1001101 #"
b1001101 ("
b1001101 -"
b1001101 2"
b10101111111 &
b10101111111 +
b1010011001 $
b1010011001 *
#65000
1"
#70000
b1111111 4
b1111111 9
b1111111 >
b1111111 C
b1111111 N
b1111111 S
b1111111 X
b1111111 ]
b1111111 h
b1111111 m
b1111111 r
b1111111 w
b1111111 $"
b1111111 )"
b1111111 ."
b1111111 3"
0t
b101111111 /
b101111111 I
b101111111 c
b101111111 }
0e
0"
b11101111111 $
b11101111111 *
0'
#75000
b11 ,
b10 ""
b10 f
b10 L
b10 2
1"
#80000
0"
0%
#85000
b0 7
b0 <
b0 A
b0 .
b0 F
b0 Q
b0 V
b0 [
b0 H
b0 `
b0 k
b0 p
b0 u
b0 b
b0 z
b0 '"
b0 ,"
b0 1"
b0 |
b0 !
b0 )
b0 6"
1"
#90000
0"
